/*
 * TencentBlueKing is pleased to support the open source community by making 蓝鲸智云-权限中心(BlueKing-IAM) available.
 * Copyright (C) 2017-2021 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: cache_policy.go

// Package mock is a generated GoMock package.
package mock

import (
	types "github.com/TencentBlueKing/bk-iam/pkg/service/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockpolicyCacher is a mock of policyCacher interface
type MockpolicyCacher struct {
	ctrl     *gomock.Controller
	recorder *MockpolicyCacherMockRecorder
}

// MockpolicyCacherMockRecorder is the mock recorder for MockpolicyCacher
type MockpolicyCacherMockRecorder struct {
	mock *MockpolicyCacher
}

// NewMockpolicyCacher creates a new mock instance
func NewMockpolicyCacher(ctrl *gomock.Controller) *MockpolicyCacher {
	mock := &MockpolicyCacher{ctrl: ctrl}
	mock.recorder = &MockpolicyCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpolicyCacher) EXPECT() *MockpolicyCacherMockRecorder {
	return m.recorder
}

// GetPolicies mocks base method
func (m *MockpolicyCacher) GetPolicies(subjectPKs []int64) ([]types.AuthPolicy, []int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", subjectPKs)
	ret0, _ := ret[0].([]types.AuthPolicy)
	ret1, _ := ret[1].([]int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPolicies indicates an expected call of GetPolicies
func (mr *MockpolicyCacherMockRecorder) GetPolicies(subjectPKs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock,
		"GetPolicies",
		reflect.TypeOf((*MockpolicyCacher)(nil).GetPolicies),
		subjectPKs,
	)
}

// SetPolicies mocks base method
func (m *MockpolicyCacher) SetPolicies(noCacheSubjectPKs []int64, noCachePolicies []types.AuthPolicy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPolicies", noCacheSubjectPKs, noCachePolicies)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPolicies indicates an expected call of SetPolicies
func (mr *MockpolicyCacherMockRecorder) SetPolicies(noCacheSubjectPKs, noCachePolicies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(
		mr.mock,
		"SetPolicies",
		reflect.TypeOf((*MockpolicyCacher)(nil).SetPolicies),
		noCacheSubjectPKs,
		noCachePolicies,
	)
}
